function firstOperationCharacter(expr) {
    
    if( expr.includes("(") ) {
        
        let dept = 0 , hash = {};
        
        for( let i = 0 ; i < expr.length ; i++ ){
            
                if(expr[i] == `(`) {
                        
                        if(hash[++dept] == null) hash[dept] = [i];
                        else hash[dept].push(i);
                }
                else if(expr[i] == `)`) dept--;
                
        }
        
        let pos = hash[Object.keys(hash).sort((a,b) => b - a )[0]];
            
        pos = pos.map(e => {
                
                let posE = e + 1;
                
                while( expr[posE] != ')' ) posE++;
                
                return [e,posE];
                
        })
        
        let index = pos.map((_,i) => i);
            
        pos = index.sort( (a,b) => priority(pos[a],pos[b],expr)  || a - b ).map(e => pos[e])[0] ;  
         
        return find(expr , pos);
    }
        
        
    return find( expr , [0 , expr.length] );    
    
}

function find(expr , pos){
        
        let res = -1;    
            
        for( let i = pos[0] + 1 ; i < pos[1] ; i++  ){
                
               if(expr[i].match(/[\*|\/]/)) return i;
                
               if( expr[i].match(/[+-]/) && res == -1 ) res = i; 
                
        } 
        return res;  
        
}

function priority( A , B , E ){
        
        const subA = E.slice(A[0]+1,A[1]);
        const subB = E.slice(B[0]+1,B[1]);
        
        if( subA.match(/[\*|\/]/g) ){
                
                if( subB.match(/[\*|\/]/g) ) return 0;
                
                else return -1;
                
        }
        else{
                
                 if( subB.match(/[\*|\/]/g) ) return 1;
                 else return 0;
        }
        
}