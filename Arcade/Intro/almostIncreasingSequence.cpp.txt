// Definition for arrays:
// typedef struct arr_##name {
//   int size;
//   type *arr;
// } arr_##name;
//
// arr_##name alloc_arr_##name(int len) {
//   arr_##name a = {len, len > 0 ? malloc(sizeof(type) * len) : NULL};
//   return a;
// }
//
//
bool almostIncreasingSequence(arr_integer sequence) {
int obj[sequence.size];
    int dem=0;int count=0;int dem1=sequence.size-1;
    for(int i=0;i<sequence.size-1;i++){
        if(sequence.arr[i]<sequence.arr[i+1]){
            obj[dem++]=sequence.arr[i];
        }
    }
    obj[dem++]=sequence.arr[sequence.size-1];
    if(dem==sequence.size){return true;}
    if(dem==sequence.size-1){
        for(int k=0;k<dem-1;k++){
            if(obj[k]<obj[k+1]){count++;}
        }
        if(count==dem-1){return true;}
    }
    for(int i=sequence.size-1;i>0;i--){
        if(sequence.arr[i]>sequence.arr[i-1]){
            obj[dem1--]=sequence.arr[i];
        }
    }
    obj[dem1--]=sequence.arr[0];int count1=sequence.size-1;
    if(dem1==0){
         for(int k=sequence.size-1;k>1;k--){
            if(obj[k]>obj[k-1]){count1--;}
        }
        if(count1==dem1+1){return true;}
    }
    return false;
}

