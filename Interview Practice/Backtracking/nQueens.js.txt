nQueens = n => {
    var row = new Array(n).fill(true)
    var col = new Array(n).fill(true)
    var diagonal1 = new Array(2 * n - 1).fill(true)
    var diagonal2 = new Array(2 * n - 1).fill(true)

    if(n === 1) return [[1]]

    Q = []

    backtracking = (row, cold, diagonal1, diagonal2, n, r, j) => {
        if(j === n) Q.push(r)
       
        else
            for(let i = 0; i < n; i++) {
                if(row[i] && col[j] && diagonal1[i - j + n - 1] && diagonal2[i + j]) {
                    row[i] = false
                    col[j] = false
                    diagonal1[i - j + n - 1] = false
                    diagonal2[i + j] = false
                    backtracking(row, col, diagonal1, diagonal2, n, [...r, i + 1], j + 1)
                    row[i] = true
                    col[j] = true
                    diagonal1[i - j + n - 1] = true
                    diagonal2[i + j] = true
                }
            }
    }
    backtracking(row, col, diagonal1, diagonal2, n, [], 0)
    return Q
} 
